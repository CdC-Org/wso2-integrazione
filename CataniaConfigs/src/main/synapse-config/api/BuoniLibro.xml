<?xml version="1.0" encoding="UTF-8"?>
<api context="/api/msistruzione/esb/istanzabuonolibri" name="IstanzeBuoniLibroApi" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" url-mapping="/acquisizione">
        <inSequence>
            <script language="js"><![CDATA[var log = mc.getServiceLog();
                var plInput = mc.getPayloadJSON();
           	  	var datiOriginali = plInput.dati;
				datiOriginali = datiOriginali.replace("\\\"IT\\\"", "");
				datiOriginali = datiOriginali.replace("\\", "");
           	  	var pl = JSON.parse(datiOriginali);
           	  	log.info("acquisizioneBuoniLibro Payload: " + JSON.stringify(pl));

			  	var plAnnoScolastico = "2021";
			    var plAnnoStr = findElement(pl,'paragraph-1605017328811').placeholder;
			    if(plAnnoStr != null && plAnnoStr.indexOf("ANNO SCOLASTICO" != -1)) {
			     plAnnoScolastico = plAnnoStr.substring(16, 20); 
			    }

                var plCodiceFiscale=findElement(pl,'cf-alunno').value;      
                var plCodiceFiscaleCittadino= plInput.codice_fiscale;

                var plCointestato=getValue(findElement(pl,'radio-1605166148122'));       
                var plIntCointestato = null;
                if (plCointestato == "Cointestato") {
                  plIntCointestato =1;
                } else if (plCointestato == "Non Cointestato") {
                      plIntCointestato =0;
                }

              	//var plCointestatario= getValue(findElement(pl,'Cointestatario'));
              	var plCointestatario= getValue(findElement(pl,'Cog_Cointestatario'))+ ' ' + getValue(findElement(pl,'Nom_Cointestatario'));

                var plContoCorrente=getValue(findElement(pl,'radio-1605165862764'));  
                var plIntContoCorrente = null;
                if (plContoCorrente == "si") {
                  plIntContoCorrente = 1;
                } else if (plContoCorrente == "no") {
                  plIntContoCorrente = 0;
                }

                var plGenitoreTutore=getValue(findElement(pl,'Scelta Genitore e Tutore'));
                var plIntGenitoreTutore = 0;
                if (plGenitoreTutore == "Genitore") {
                  plIntGenitoreTutore = 0;
                } else if (plGenitoreTutore == "Tutore") {
                  plIntGenitoreTutore = 1;
                }

                var plSesso = getValue(findElement(pl,'SX_ALU'));
                var plIntSesso = 0;
                if (plSesso == "F") {
                  plIntSesso = 0;
                } else {
                  plIntSesso = 1;
                }

                var plSessoRichiedente  = getValue(findElement(pl,'SX_GEN')); 
                var plIntSessoRichiedente = 0;
                if (plSessoRichiedente == "F") {
                  plIntSessoRichiedente = 0;
                } else {
                 plIntSessoRichiedente = 1;
                }
                
                var plTipoScuola  = getValue(findElement(pl,'Tipologia scuola'));
                var plIntTipoScuola = 0;
                if (plTipoScuola == "Statale") {
                  plIntTipoScuola = 0;
                } else if (plTipoScuola == "Paritaria") {
                  plIntTipoScuola = 1;
                }
                
                var plIntStato = 1;
                if (plInput.conclusa == "true" && plInput.respinta == "true") {
                  plIntStato = 3;
                }
                if (plInput.conclusa == "false" && plInput.respinta == "false") {
                  plIntStato = 1;
                }
                if (plInput.conclusa == "true" && plInput.respinta == "false") {
                  plIntStato = 2;
                }
                if (plInput.conclusa == "false" && plInput.respinta == "true") {
                  plIntStato = 3;
                }
  
                var keys = Object.keys(plInput);
                var response = {
                  			  "annoScolastico": plAnnoScolastico,
                 			  "cap": getValue(findElement(pl,'cap')),
                              "classe": getValue(findElement(pl,'Classe')),
                              "codiceFiscale": plCodiceFiscale,                          
                              "codiceFiscaleCittadino": plCodiceFiscaleCittadino,                            
                              "codiceFiscaleRichiedente": getValue(findElement(pl,'cf-genitore')),                         
                              "cognome": getValue(findElement(pl,'Cog_alunno')),                                
                              "cognomeRichiedente": getValue(findElement(pl,'cognome-genitore')),     
                              "cointestatario": plCointestatario,   
                              "cointestato": plIntCointestato,
                              "comuneNascita":  getValue(findElement(pl,'Luogo di nascita alunno')), 
                              "comuneNascitaRichiedente": getValue(findElement(pl,'Luogo di nascita')),     
                              "comuneResidenza": getValue(findElement(pl,'comune')), 
                              "comuneScuola": getValue(findElement(pl,'text-1605017676697')),   
                              "contoCorrente": plIntContoCorrente,                        
                              "dataIstanza": parseDate("" + plInput.dataInvio + " "),   
                              "dataNascita": getValue(findElement(pl,'Data di nascita alunno')), 
                              "dataNascitaRichiedente": getValue(findElement(pl,'Data di nascita')), 
                              "dataProtocolloIngresso": parseDate("" + plInput.protoData  + " "),
                              "dataProtocolloUscita": parseDate("" + plInput.protoFinaleData + " ") ,           
                              "email": getValue(findElement(pl,'email')), 
                              "emailCittadino": plInput.email, 
                              "genitoreTutore": plIntGenitoreTutore,
                              "iban": removeAllSpace(getValue(findElement(pl,'iban'))),  
                              "idIstanzaOnline": plInput.id,
                              "nome": getValue(findElement(pl,'NM_Alunno')), 
                              "nomeRichiedente": getValue(findElement(pl,'nome-genitore')),   
                              "numeroProtocolloIngresso": plInput.protoNumero, 
                              "numeroProtocolloUscita": plInput.protoFinaleNumero, 
                              "pec": getValue(findElement(pl,'P.E.C.')),     
                              "provvedimento": getToggle(findElement(pl,'provvedimento')),    
                              "residenza": getValue(findElement(pl,'residenza')),     
                              "scuola": getValue(findElement(pl,'Scuola')),   
                              "sesso": plIntSesso,                                 
                              "sessoRichiedente": plIntSessoRichiedente,
                              "sezione": getValue(findElement(pl,'Sezione')),
                              "stato": plIntStato,                                             
                              "telefono": getValue(findElement(pl,'Telefono')), 
                              "tipoScuola": plIntTipoScuola                
                };
                          
                mc.setPayloadJSON(response);
				
                function parseDate(input) {
                 	return new Date(Number(input)).toISOString().split('T')[0];
                }
                
                function parseDateOld (input) {
                	var posInizialeGiorno = 4;
                	var posInizialeAnno = 8;
                	var meseNumerico = "";
                	var meseBreveInglese = input.substr(0,3);
                	
                	if (meseBreveInglese == "Sep")
                	{
                		posInizialeGiorno++;
                		posInizialeAnno++;
                	}
                	
                	var giorno = input.substr(posInizialeGiorno,2);;
                	var anno = input.substr(posInizialeAnno,4);;
                	
                	switch (meseBreveInglese) 
                	{
                		case 'Jan':
                			meseNumerico = "01";
    						break;
    					case 'Feb':
                			meseNumerico = "02";
    						break;
   						case 'Mar':
                			meseNumerico = "03";
    						break;
   						case 'Apr':
                			meseNumerico = "04";
    						break;
    					case 'May':
                			meseNumerico = "05";
    						break;	
    					case 'Jun':
                			meseNumerico = "06";
    						break;	
    					case 'Jul':
                			meseNumerico = "07";
    						break;	
    					case 'Aug':
                			meseNumerico = "08";
    						break;	
    					case 'Sept':
                			meseNumerico = "09";
    						break;	
  						case 'Oct':
      						meseNumerico = "10";
    						break;
    					case 'Nov':
                			meseNumerico = "11";
    						break;	
   						case 'Dec':
                			meseNumerico = "12";
    						break;
					}
				    return anno + "-" + meseNumerico + "-" + giorno;
				}
                
                function findElement(lista,nome){
                    var element='';
                    for (i = 0; i < lista.length; ++i) {
                        if (lista[i].name==nome) {
                            element=lista[i];
                            break;
                        }
                    }
                    return element;
                }

                function getValue(element){
                    if(element && element.value){
                        return element.value; 
                    }
                    return '';
                }
                
                function removeAllSpace(input) {
                 	return input.replace(/\s/g,'');
                }

                function getToggle(element){
                    if(element){
                        if(element.toggle){
                            return '1'; 
                        } else {
                            return '0';
                        }
                    }
                    return '';
                }]]></script>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log description="Log Input" level="custom">
                <property name="MESSAGE" value="Request received to /users resource."/>
            </log>
            <call blocking="true" description="Send Request to Users Endpoint">
                <endpoint key="acquisizione"/>
            </call>
            <sequence key="istanzeBuoniLibroReturn"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <log category="ERROR" description="Log Errore" level="custom">
                <property name="text" value="An unexpected error occured"/>
                <property expression="get-property('ERROR_MESSAGE')" name="message"/>
            </log>
            <payloadFactory media-type="json">
                <format>
                  {
                    "payload": {
                      "esito": "1"
                    },
                    "outcome": {
                      "issue": [
                        {
                          "severity": "FATAL",
                          "code": "$1",
                          "message": "$2"
                        }
                      ]
                    }
                  }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
                    <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
            <respond description="Send Error Back to Client"/>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/validazione">
        <inSequence>
            <script language="js"><![CDATA[var plInput = mc.getPayloadJSON();
            	var log = mc.getServiceLog();
            	var datiOriginali = plInput.dati;
				datiOriginali = datiOriginali.replace("\\\"IT\\\"", "");
				datiOriginali = datiOriginali.replace("\\", "");
           	  	var pl = JSON.parse(datiOriginali);
           	  	log.info("validazioneBuoniLibro Payload: " + JSON.stringify(pl));

			  	var plAnnoScolastico = "2021";
			    var plAnnoStr = findElement(pl,'paragraph-1605017328811').placeholder;
			    if(plAnnoStr != null && plAnnoStr.indexOf("ANNO SCOLASTICO" != -1)) {
			     plAnnoScolastico = plAnnoStr.substring(16, 20); 
			    }

                var plCodiceFiscale=findElement(pl,'cf-alunno').value;      
                var plCodiceFiscaleCittadino= plInput.codice_fiscale;
                var plCointestato=getValue(findElement(pl,'radio-1605166148122'));
                var plIntCointestato = null;

                if (plCointestato == "Cointestato") {
                    plIntCointestato =1;
                } else if (plCointestato == "Non Cointestato") {
                    plIntCointestato =0;
                }
               
                //var plCointestatario= getValue(findElement(pl,'Cointestatario'));
              	var plCointestatario= getValue(findElement(pl,'Cog_Cointestatario'))+ ' ' + getValue(findElement(pl,'Nom_Cointestatario'));
              	
                var plContoCorrente=getValue(findElement(pl,'radio-1605165862764'));  
                var plIntContoCorrente = null;
                if (plContoCorrente == "si") {
                  plIntContoCorrente = 1;
                } else if (plContoCorrente == "no") {
                  plIntContoCorrente = 0;
                }
                
                var plGenitoreTutore=getValue(findElement(pl,'Scelta Genitore e Tutore'));
                var plIntGenitoreTutore = 0;
                if (plGenitoreTutore == "Genitore") {
                  plIntGenitoreTutore = 0;
                } else  if (plGenitoreTutore == "Tutore") {
                  plIntGenitoreTutore = 1;
                }
                 
                var plSesso = getValue(findElement(pl,'SX_ALU'));
                var plIntSesso = 0;
                if (plSesso == "F") {
                  plIntSesso = 0;
                } else {
                  plIntSesso = 1;
                }
                
                var plSessoRichiedente  = getValue(findElement(pl,'SX_GEN')); 
                var plIntSessoRichiedente = 0;
                if (plSessoRichiedente == "F") {
                  plIntSessoRichiedente = 0;
                } else {
                 plIntSessoRichiedente = 1;
                }
                
                var plTipoScuola  = getValue(findElement(pl,'Tipologia scuola'));
                var plIntTipoScuola = 1;
                if (plTipoScuola == "Statale") {
                  plIntTipoScuola = 1;
                } else if (plTipoScuola == "Paritaria") {
                  plIntTipoScuola = 2;
                }
                
                var keys = Object.keys(plInput);
                var response = {
                  			  "annoScolastico": plAnnoScolastico,
                  			  "cap": getValue(findElement(pl,'cap')),
                              "classe": getValue(findElement(pl,'Classe')),
                              "codiceFiscale": plCodiceFiscale,                          
                              "codiceFiscaleCittadino": plCodiceFiscaleCittadino,                            
                              "codiceFiscaleRichiedente": getValue(findElement(pl,'cf-genitore')),                         
                              "cognome": getValue(findElement(pl,'Cog_alunno')),                                
                              "cognomeRichiedente": getValue(findElement(pl,'cognome-genitore')),     
                              "cointestatario": plCointestatario,   
                              "cointestato": plIntCointestato,
                              "comuneNascita":  getValue(findElement(pl,'Luogo di nascita alunno')), 
                              "comuneNascitaRichiedente": getValue(findElement(pl,'Luogo di nascita')),     
                              "comuneResidenza": getValue(findElement(pl,'comune')), 
                              "comuneScuola": getValue(findElement(pl,'text-1605017676697')),   
                              "contoCorrente": plIntContoCorrente,                        
                              "dataNascita": getValue(findElement(pl,'Data di nascita alunno')), 
                              "dataNascitaRichiedente": getValue(findElement(pl,'Data di nascita')),     
                              "email": getValue(findElement(pl,'email')), 
                              "emailCittadino": plInput.email, 
                              "genitoreTutore": plIntGenitoreTutore,
                              "iban": removeAllSpace(getValue(findElement(pl,'iban'))),  
                              "nome": getValue(findElement(pl,'NM_Alunno')), 
                              "nomeRichiedente": getValue(findElement(pl,'nome-genitore')),   
                              "pec": getValue(findElement(pl,'P.E.C.')),     
                              "provvedimento": getToggle(findElement(pl,'provvedimento')),    
                              "residenza": getValue(findElement(pl,'residenza')),     
                              "scuola": getValue(findElement(pl,'Scuola')),   
                              "sesso": plIntSesso,                                 
                              "sessoRichiedente": plIntSessoRichiedente,
                              "sezione": getValue(findElement(pl,'Sezione')),                                
                              "telefono": getValue(findElement(pl,'Telefono')), 
                              "tipoScuola": plIntTipoScuola                
                };

                mc.setPayloadJSON(response);
				
                function parseDate(input) {
                 	return new Date(Number(input)).toISOString().split('T')[0];
                }

                function parseDateOld (input) {
                	var posInizialeGiorno = 4;
                	var posInizialeAnno = 8;
                	var meseNumerico = "";
                	var meseBreveInglese = input.substr(0,3);
                	
                	if (meseBreveInglese == "Sep")
                	{
                		posInizialeGiorno++;
                		posInizialeAnno++;
                	}
                	
                	var giorno = input.substr(posInizialeGiorno,2);;
                	var anno = input.substr(posInizialeAnno,4);;
                	
                	switch (meseBreveInglese) 
                	{
                		case 'Jan':
                			meseNumerico = "01";
    						break;
    					case 'Feb':
                			meseNumerico = "02";
    						break;
   						case 'Mar':
                			meseNumerico = "03";
    						break;
   						case 'Apr':
                			meseNumerico = "04";
    						break;
    					case 'May':
                			meseNumerico = "05";
    						break;	
    					case 'Jun':
                			meseNumerico = "06";
    						break;	
    					case 'Jul':
                			meseNumerico = "07";
    						break;	
    					case 'Aug':
                			meseNumerico = "08";
    						break;	
    					case 'Sept':
                			meseNumerico = "09";
    						break;	
  						case 'Oct':
      						meseNumerico = "10";
    						break;
    					case 'Nov':
                			meseNumerico = "11";
    						break;	
   						case 'Dec':
                			meseNumerico = "12";
    						break;
					}
				    return anno + "-" + meseNumerico + "-" + giorno;
				}
                
                function findElement(lista,nome){
                  var element='';
                  for (i = 0; i < lista.length; ++i) {
                      if (lista[i].name==nome) {
                          element=lista[i];
                          break;
                      }
                  }
                  return element;
                }

                function getValue(element){
                    if(element && element.value){
                        return element.value; 
                    }
                    return '';
                }

                function removeAllSpace(input) {
                 	return input.replace(/\s/g,'');
                }

                function getToggle(element){
                    if(element){
                        if(element.toggle){
                            return '1'; 
                        } else {
                            return '0';
                        }
                    }
                    return '';
                }]]></script>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log description="Log Input" level="custom">
                <property name="MESSAGE" value="Request received to /users resource."/>
            </log>
            <call blocking="true" description="Send Request to Users Endpoint">
                <endpoint key="validazione"/>
            </call>
            <sequence key="validazioneReturn"/>
            <respond description="Send Response Back to Client"/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <log category="ERROR" description="Log Errore" level="custom">
                <property name="text" value="An unexpected error occured"/>
                <property expression="get-property('ERROR_MESSAGE')" name="message"/>
            </log>
            <payloadFactory media-type="json">
                <format>
                  {
                    "payload": {
                      "esito": "1"
                    },
                    "outcome": {
                      "issue": [
                        {
                          "severity": "FATAL",
                          "code": "$1",
                          "message": "$2"
                        }
                      ]
                    }
                  }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
                    <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
            <respond description="Send Error Back to Client"/>
        </faultSequence>
    </resource>
</api>
