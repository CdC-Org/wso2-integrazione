<?xml version="1.0" encoding="UTF-8"?>
<api context="/api/msistruzione/esb/istanzaiscrizione" name="Iscrizione" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="POST" url-mapping="/acquisizione">
        <inSequence>
            <script language="js"><![CDATA[var log = mc.getServiceLog();
                var plInput = mc.getPayloadJSON();
           	  	var datiOriginali = plInput.dati;
           	  	var pl = JSON.parse(datiOriginali);
           	  	log.info("acquisizioneIscrizione Payload: " + JSON.stringify(pl));

				var idIstanzaOnline = plInput.id;
				var numeroProtocolloIngresso = plInput.protoNumero;
				var dataProtocolloIngresso = parseDate(plInput.protoData);
				var numeroProtocolloUscita = plInput.protoFinaleNumero ? plInput.protoFinaleNumero : null;
				var dataProtocolloUscita = parseDate(plInput.protoFinaleData);
				var dataIstanza = parseDate(plInput.dataInvio);
				var codFiscaleCittadino = plInput.codice_fiscale;
				var emailCittadino = plInput.email ? plInput.email : null;
				var flgRiconferma = decodeFlg(pl, "iscrizione", "riconferma");
				var insegnante = findElementValue(pl, "insegnante_riconferma");
				var responsabile = findElementValue(pl, "nome_richiedente");
				var richiedente = findElementValue(pl, "richiedente");

				var tipoResponsabile = 0;
				if(richiedente == "tutore") {
				    tipoResponsabile = 1; 
				} else if(richiedente == "affidatario") {
				    tipoResponsabile = 2;
				}

				var minoreCognome = findElementValue(pl, "cognome_figlio");
				var minoreNome = findElementValue(pl, "nome_figlio");
				
				var sesso = findComplexElementValue(pl, "sesso");
				var minoreSesso = 0;
				if(sesso == "M") {
				    minoreSesso = 1;
				}
				
				var minoreCodFiscale = findElementValue(pl, "cf_figlio");

				var scuola = findComplexElementValue(pl, "untitled4");
				var codMecPlesso = "";
				if(scuola && scuola.indexOf("(") != -1 && scuola.indexOf(")") != -1) {
					codMecPlesso = scuola.substring(scuola.indexOf("(")+1, scuola.indexOf(")"));
				}
				
				var minoreLuogoNascita = findElementValue(pl, "luogo_nascita");
				var minoreDataNascita = findElementValue(pl, "data_nascita");
				var minoreNazionalita = decodeFlg(pl, "nazione", "straniero");
				var minoreNazione = findElementValue(pl, "nazionalita");
				var minoreProvinciaResidenza = findElementValue(pl, "prov_residenza");
				var minoreIndirizzo = findElementValue(pl, "via_residenza");
				var flgVaccinato = decodeFlg(pl, "vaccinazione", "si");
				var flgAnticipatario = decodeFlg(pl, "anticipatario", "si");
				var flgDisabilita = decodeFlg(pl, "disabilita", "si");
				var flgPratica = decodeFlg(pl, "pratica_completa", "si");

				var familiare1 = findElementValue(pl, "nome_richiedente_rpinc");
				var familiare1LuogoData = findElementValue(pl, "nascita_richiedente");
				var familiare1Relazione = "Richiedente";

				var familiare2 = findElementValue(pl, "nome_parente1");
				var familiare2LuogoData = findElementValue(pl, "nascita_parente1");
				var familiare2Relazione = findElementValue(pl, "relazione_parente1");

				var familiare3 = findElementValue(pl, "nome_parente2");
				var familiare3LuogoData = findElementValue(pl, "nascita_parente2");
				var familiare3Relazione = findElementValue(pl, "relazione_parente2");

				var familiare4 = findElementValue(pl, "nome_parente3");
				var familiare4LuogoData = findElementValue(pl, "nascita_parente3");
				var familiare4Relazione = findElementValue(pl, "relazione_parente3");

				var familiare5 = findElementValue(pl, "nome_parente4");
				var familiare5LuogoData = findElementValue(pl, "nascita_parente4");
				var familiare5Relazione = findElementValue(pl, "relazione_parente4");

				var professione = findElementValue(pl, "professione");
				var sedeLavorativa = findElementValue(pl, "sede_lavorativa");
				var flgRefezione = decodeFlg(pl, "turno", "pm");
				var flgFratello = decodeFlg(pl, "presenza_fratelli", "si");
				var fratelloPlesso = findElementValue(pl, "nome_scuola");
				var fratello = findElementValue(pl, "nome_fratello");
				var fratelloDataNascita = findElementValue(pl, "data_nascita_fratello");
				var fratelloInsegnante = findElementValue(pl, "nome_ins_fratello");
				var fratelloAsilo = findElementValue(pl, "nome_asilo_nido");
				var fratelloAsiloVia = findElementValue(pl, "via_asilo_nido");
				var responsabileTelefono = findElementValue(pl, "tel1");
				var responsabileCellulare = findElementValue(pl, "cell1");
				var responsabileEmail = findElementValue(pl, "mail1");
				var responsabileTelefono2 = findElementValue(pl, "tel2");
				var responsabileCellulare2 = findElementValue(pl, "cell2");
				var responsabileEmail2 = findElementValue(pl, "mail2");
				var flgConsenso = decodeFlg(pl, "consenso", "si");
				var flgAutorizzazione = decodeFlg(pl, "autorizza", "si");
				var annoScolastico = new Date().getFullYear();				
				
                var requestAcquisizione = {
                  "idIstanzaOnline": idIstanzaOnline, 
                  "numeroProtocolloIngresso": numeroProtocolloIngresso,
                  "dataProtocolloIngresso": dataProtocolloIngresso,
                  "numeroProtocolloUscita": numeroProtocolloUscita, 
                  "dataProtocolloUscita": dataProtocolloUscita,
                  "dataIstanza": dataIstanza,
                  "codFiscaleCittadino": codFiscaleCittadino,
                  "emailCittadino": emailCittadino,
                  "annoScolastico": annoScolastico,
                  "flgRiconferma": flgRiconferma,
                  "insegnante": insegnante,
                  "codMecPlesso": codMecPlesso,
                  "tipoResponsabile": tipoResponsabile,
                  "responsabile": responsabile,
                  "responsabileTelefono": responsabileTelefono,
                  "responsabileCellulare": responsabileCellulare,
                  "responsabileEmail": responsabileEmail,
                  "responsabileTelefono2": responsabileTelefono2,
                  "responsabileCellulare2": responsabileCellulare2,
                  "responsabileEmail2": responsabileEmail2,
                  "minoreCognome": minoreCognome,
                  "minoreNome": minoreNome,
                  "minoreLuogoNascita": minoreLuogoNascita,
                  "minoreDataNascita": minoreDataNascita,
                  "minoreSesso": minoreSesso,
                  "minoreCodFiscale": minoreCodFiscale,
                  "minoreNazionalita": minoreNazionalita,
                  "minoreNazione": minoreNazione,
                  "minoreProvinciaResidenza": minoreProvinciaResidenza,
                  "minoreIndirizzo": minoreIndirizzo,
                  "flgVaccinato": flgVaccinato,
                  "flgAnticipatario": flgAnticipatario,
                  "familiare1": familiare1,
                  "familiare1LuogoData": familiare1LuogoData,
                  "familiare1Relazione": familiare1Relazione,
                  "familiare2": familiare2,
                  "familiare2LuogoData": familiare2LuogoData,
                  "familiare2Relazione": familiare2Relazione,
                  "familiare3": familiare3,
                  "familiare3LuogoData": familiare3LuogoData,
                  "familiare3Relazione": familiare3Relazione,
                  "familiare4": familiare4,
                  "familiare4LuogoData": familiare4LuogoData,
                  "familiare4Relazione": familiare4Relazione,
                  "familiare5": familiare5,
                  "familiare5LuogoData": familiare5LuogoData,
                  "familiare5Relazione": familiare5Relazione,
                  "professione": professione,
                  "sedeLavorativa": sedeLavorativa,
                  "flgRefezione": flgRefezione,
                  "flgFratello": flgFratello,
                  "fratello": fratello,
                  "fratelloDataNascita": fratelloDataNascita,
                  "fratelloInsegnante": fratelloInsegnante,
                  "fratelloPlesso": fratelloPlesso,
                  "fratelloAsilo": fratelloAsilo,
                  "fratelloAsiloVia": fratelloAsiloVia,
                  "flgConsenso": flgConsenso,
                  "flgAutorizzazione": flgAutorizzazione,
                  "flgDisabilita": flgDisabilita,
                  "flgPratica": flgPratica,
                };
                          
           	  	log.info("acquisizioneIscrizione request: " + JSON.stringify(requestAcquisizione));
                mc.setPayloadJSON(requestAcquisizione);
				
                function parseDate(input) {
                	if(input) {
                		return new Date(Number(input)).toISOString().split('T')[0];
                 	} else {
                 		return null;
                 	}
                }
                
                function findElementValue(pl, nomeAttributo) {
                    var value = null;

                    for (i = 0; i < pl.length; ++i) {
                        if(nomeAttributo == pl[i][0]) {
                            value = pl[i][1];
                            break;
                        }
                    }

                    return value;
                }
                function findComplexElementValue(pl, nomeAttributo) {
                    var value = null;

                    for (i = 0; i < pl.length; ++i) {
                        if(nomeAttributo == pl[i][0]) {
                            value = pl[i][1][0];
                            break;
                        }
                    }

                    return value;
                }
				function decodeFlg(pl, nomeAttributo, valueToDecode) {
					var value = findElementValue(pl, nomeAttributo);
					var flg = 0;
					if(value == valueToDecode) {
						flg = 1;
					}
					return flg;
				}]]></script>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log description="Log Input" level="custom">
                <property name="MESSAGE" value="Request received to /users resource."/>
            </log>
            <call blocking="true" description="Send Request to Users Endpoint">
                <endpoint key="iscrizioneAcquisizione"/>
            </call>
            <sequence key="iscrizioneAcquisizioneResponse"/>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <log category="ERROR" description="Log Errore" level="custom">
                <property name="text" value="An unexpected error occured"/>
                <property expression="get-property('ERROR_MESSAGE')" name="message"/>
            </log>
            <payloadFactory media-type="json">
                <format>
                  {
                    "payload": {
                      "esito": "1"
                    },
                    "outcome": {
                      "issue": [
                        {
                          "severity": "FATAL",
                          "code": "$1",
                          "message": "$2"
                        }
                      ]
                    }
                  }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
                    <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
            <respond description="Send Error Back to Client"/>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/validazione">
        <inSequence>
            <script language="js"><![CDATA[var log = mc.getServiceLog();
                var plInput = mc.getPayloadJSON();
           	  	var datiOriginali = plInput.dati;
           	  	var pl = JSON.parse(datiOriginali);
           	  	log.info("validazioneIscrizione Payload: " + JSON.stringify(pl));

				var idIstanzaOnline = plInput.id;
				var numeroProtocolloIngresso = plInput.protoNumero;
				var dataProtocolloIngresso = parseDate(plInput.protoData);
				var numeroProtocolloUscita = plInput.protoFinaleNumero ? plInput.protoFinaleNumero : null;
				var dataProtocolloUscita = parseDate(plInput.protoFinaleData);
				var dataIstanza = parseDate(plInput.dataInvio);
				var codFiscaleCittadino = plInput.codice_fiscale;
				var emailCittadino = plInput.email ? plInput.email : null;
				var flgRiconferma = decodeFlg(pl, "iscrizione", "riconferma");
				var insegnante = findElementValue(pl, "insegnante_riconferma");
				var responsabile = findElementValue(pl, "nome_richiedente");
				var richiedente = findElementValue(pl, "richiedente");

				var tipoResponsabile = 0;
				if(richiedente == "tutore") {
				    tipoResponsabile = 1; 
				} else if(richiedente == "affidatario") {
				    tipoResponsabile = 2;
				}

				var minoreCognome = findElementValue(pl, "cognome_figlio");
				var minoreNome = findElementValue(pl, "nome_figlio");
				
				var sesso = findComplexElementValue(pl, "sesso");
				var minoreSesso = 0;
				if(sesso == "M") {
				    minoreSesso = 1;
				}
				
				var minoreCodFiscale = findElementValue(pl, "cf_figlio");

				var scuola = findComplexElementValue(pl, "untitled4");
				var codMecPlesso = "";
				if(scuola && scuola.indexOf("(") != -1 && scuola.indexOf(")") != -1) {
					codMecPlesso = scuola.substring(scuola.indexOf("("), scuola.indexOf(")"));
				}
				
				var minoreLuogoNascita = findElementValue(pl, "luogo_nascita");
				var minoreDataNascita = findElementValue(pl, "data_nascita");
				var minoreNazionalita = decodeFlg(pl, "nazione", "straniero");
				var minoreNazione = findElementValue(pl, "nazionalita");
				var minoreProvinciaResidenza = findElementValue(pl, "prov_residenza");
				var minoreIndirizzo = findElementValue(pl, "via_residenza");
				var flgVaccinato = decodeFlg(pl, "vaccinazione", "si");
				var flgAnticipatario = decodeFlg(pl, "anticipatario", "si");
				var flgDisabilita = decodeFlg(pl, "disabilita", "si");
				var flgPratica = decodeFlg(pl, "pratica_completa", "si");

				var familiare1 = findElementValue(pl, "nome_richiedente_rpinc");
				var familiare1LuogoData = findElementValue(pl, "nascita_richiedente");
				var familiare1Relazione = "Richiedente";

				var familiare2 = findElementValue(pl, "nome_parente1");
				var familiare2LuogoData = findElementValue(pl, "nascita_parente1");
				var familiare2Relazione = findElementValue(pl, "relazione_parente1");

				var familiare3 = findElementValue(pl, "nome_parente2");
				var familiare3LuogoData = findElementValue(pl, "nascita_parente2");
				var familiare3Relazione = findElementValue(pl, "relazione_parente2");

				var familiare4 = findElementValue(pl, "nome_parente3");
				var familiare4LuogoData = findElementValue(pl, "nascita_parente3");
				var familiare4Relazione = findElementValue(pl, "relazione_parente3");

				var familiare5 = findElementValue(pl, "nome_parente4");
				var familiare5LuogoData = findElementValue(pl, "nascita_parente4");
				var familiare5Relazione = findElementValue(pl, "relazione_parente4");

				var professione = findElementValue(pl, "professione");
				var sedeLavorativa = findElementValue(pl, "sede_lavorativa");
				var flgRefezione = decodeFlg(pl, "turno", "pm");
				var flgFratello = decodeFlg(pl, "presenza_fratelli", "si");
				var fratelloPlesso = findElementValue(pl, "nome_scuola");
				var fratello = findElementValue(pl, "nome_fratello");
				var fratelloDataNascita = findElementValue(pl, "data_nascita_fratello");
				var fratelloInsegnante = findElementValue(pl, "nome_ins_fratello");
				var fratelloAsilo = findElementValue(pl, "nome_asilo_nido");
				var fratelloAsiloVia = findElementValue(pl, "via_asilo_nido");
				var responsabileTelefono = findElementValue(pl, "tel1");
				var responsabileCellulare = findElementValue(pl, "cell1");
				var responsabileEmail = findElementValue(pl, "mail1");
				var responsabileTelefono2 = findElementValue(pl, "tel2");
				var responsabileCellulare2 = findElementValue(pl, "cell2");
				var responsabileEmail2 = findElementValue(pl, "mail2");
				var flgConsenso = decodeFlg(pl, "consenso", "si");
				var flgAutorizzazione = decodeFlg(pl, "autorizza", "si");
				var annoScolastico = new Date().getFullYear();				
				
                var requestValidazione = {
                  "idIstanzaOnline": idIstanzaOnline, 
                  "numeroProtocolloIngresso": numeroProtocolloIngresso,
                  "dataProtocolloIngresso": dataProtocolloIngresso,
                  "numeroProtocolloUscita": numeroProtocolloUscita, 
                  "dataProtocolloUscita": dataProtocolloUscita,
                  "dataIstanza": dataIstanza,
                  "codFiscaleCittadino": codFiscaleCittadino,
                  "emailCittadino": emailCittadino,
                  "annoScolastico": annoScolastico,
                  "flgRiconferma": flgRiconferma,
                  "insegnante": insegnante,
                  "codMecPlesso": codMecPlesso,
                  "tipoResponsabile": tipoResponsabile,
                  "responsabile": responsabile,
                  "responsabileTelefono": responsabileTelefono,
                  "responsabileCellulare": responsabileCellulare,
                  "responsabileEmail": responsabileEmail,
                  "responsabileTelefono2": responsabileTelefono2,
                  "responsabileCellulare2": responsabileCellulare2,
                  "responsabileEmail2": responsabileEmail2,
                  "minoreCognome": minoreCognome,
                  "minoreNome": minoreNome,
                  "minoreLuogoNascita": minoreLuogoNascita,
                  "minoreDataNascita": minoreDataNascita,
                  "minoreSesso": minoreSesso,
                  "minoreCodFiscale": minoreCodFiscale,
                  "minoreNazionalita": minoreNazionalita,
                  "minoreNazione": minoreNazione,
                  "minoreProvinciaResidenza": minoreProvinciaResidenza,
                  "minoreIndirizzo": minoreIndirizzo,
                  "flgVaccinato": flgVaccinato,
                  "flgAnticipatario": flgAnticipatario,
                  "familiare1": familiare1,
                  "familiare1LuogoData": familiare1LuogoData,
                  "familiare1Relazione": familiare1Relazione,
                  "familiare2": familiare2,
                  "familiare2LuogoData": familiare2LuogoData,
                  "familiare2Relazione": familiare2Relazione,
                  "familiare3": familiare3,
                  "familiare3LuogoData": familiare3LuogoData,
                  "familiare3Relazione": familiare3Relazione,
                  "familiare4": familiare4,
                  "familiare4LuogoData": familiare4LuogoData,
                  "familiare4Relazione": familiare4Relazione,
                  "familiare5": familiare5,
                  "familiare5LuogoData": familiare5LuogoData,
                  "familiare5Relazione": familiare5Relazione,
                  "professione": professione,
                  "sedeLavorativa": sedeLavorativa,
                  "flgRefezione": flgRefezione,
                  "flgFratello": flgFratello,
                  "fratello": fratello,
                  "fratelloDataNascita": fratelloDataNascita,
                  "fratelloInsegnante": fratelloInsegnante,
                  "fratelloPlesso": fratelloPlesso,
                  "fratelloAsilo": fratelloAsilo,
                  "fratelloAsiloVia": fratelloAsiloVia,
                  "flgConsenso": flgConsenso,
                  "flgAutorizzazione": flgAutorizzazione,
                  "flgDisabilita": flgDisabilita,
                  "flgPratica": flgPratica,
                };
                          
           	  	log.info("validazioneIscrizione request: " + JSON.stringify(requestValidazione));
                mc.setPayloadJSON(requestValidazione);
				
                function parseDate(input) {
                	if(input) {
                		return new Date(Number(input)).toISOString().split('T')[0];
                 	} else {
                 		return null;
                 	}
                }
                
                function findElementValue(pl, nomeAttributo) {
                    var value = null;
                    for (i = 0; i < pl.length; ++i) {
                        if(nomeAttributo == pl[i][0]) {
                            value = pl[i][1];
                            break;
                        }
                    }

                    return value;
                }

                function findComplexElementValue(pl, nomeAttributo) {
                    var value = null;
                    for (i = 0; i < pl.length; ++i) {
                        if(nomeAttributo == pl[i][0]) {
                            value = pl[i][1][0];
                            break;
                        }
                    }

                    return value;
                }
				function decodeFlg(pl, nomeAttributo, valueToDecode) {
					var value = findElementValue(pl, nomeAttributo);
					var flg = 0;
					if(value == valueToDecode) {
						flg = 1;
					}
					return flg;
				}]]></script>
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log description="Log Input" level="custom">
                <property name="MESSAGE" value="Request received to /users resource."/>
            </log>
            <call blocking="true" description="Send Request to Users Endpoint">
                <endpoint key="iscrizioneValidazione"/>
            </call>
            <sequence key="iscrizioneValidazioneResponse"/>
            <respond description="Send Response Back to Client"/>
        </inSequence>
        <outSequence/>
        <faultSequence>
            <log category="ERROR" description="Log Errore" level="custom">
                <property name="text" value="An unexpected error occured"/>
                <property expression="get-property('ERROR_MESSAGE')" name="message"/>
            </log>
            <payloadFactory media-type="json">
                <format>
                  {
                    "payload": {
                      "esito": "1"
                    },
                    "outcome": {
                      "issue": [
                        {
                          "severity": "FATAL",
                          "code": "$1",
                          "message": "$2"
                        }
                      ]
                    }
                  }
                </format>
                <args>
                    <arg evaluator="xml" expression="get-property('ERROR_CODE')"/>
                    <arg evaluator="xml" expression="get-property('ERROR_MESSAGE')"/>
                </args>
            </payloadFactory>
            <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
            <respond description="Send Error Back to Client"/>
        </faultSequence>
    </resource>
</api>
